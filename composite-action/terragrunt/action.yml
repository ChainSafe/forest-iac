name: Custom Composite action to deploy terragrunt resources

description: |
  This action deploys the Forest infrastructure with Terragrunt

inputs:
  environment:
    description: 'The terraform plan for the the environment infrastructure to be deployed'
    required: true
  do_token:
    description: 'The DigitalOcean access token to use for deploying the infrastructure'
    required: true
  aws_access_key_id:
    description: 'S3 access keys id used by terraform and service like sync check, Deploy Snapshot Service etc'
    required: true
  aws_secret_access_key:
    description: 'S3 secret access keys used by terraform and service like sync check, Deploy Snapshot Service etc'
    required: true
  working_directory:
    description: 'The working Directory'
    required: true
  slack_token:
    description: 'The slack token secret used to connect the Infrastructure to Slack'
  new_relic_api_key:
    description: 'The New Relic API KEY'
  nr_license_key:
    description: 'The New Relic Access Token'
  new_relic_account_id:
    description: 'The New Relic Platform Region'
  r2_access_key:
    description: 'CloudFlare R2 access key id'
  r2_secret_key:
    description: 'CloudFlare R2 private access key'

runs:
  using: "composite"
  steps:
    # Workaround for https://github.com/orgs/community/discussions/51280
    - name: Set TF/TG versions
      shell: bash
      run: |
        echo "tf_version=1.6.6" >> $GITHUB_ENV
        echo "tg_version=0.53.2" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: v${{ env.tf_version }}
        terraform_wrapper: false

    - name: Setup Terragrunt
      shell: bash
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.tg_version }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    - name: Check terragrunt HCL
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: |
        terragrunt hclfmt --terragrunt-check --terragrunt-diff

    - name: Validate
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      run: |
        terragrunt validate
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}

    - name: Plan
      if: github.event_name == 'pull_request'
      id: plan
      working-directory: ${{ inputs.working_directory }}
      continue-on-error: true
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        TF_VAR_digitalocean_token: ${{ inputs.do_token }}
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        TF_VAR_R2_ACCESS_KEY: ${{ inputs.r2_access_key }}
        TF_VAR_R2_SECRET_KEY: ${{ inputs.r2_secret_key }}
        TF_VAR_slack_token: ${{ inputs.slack_token }}
        TF_VAR_new_relic_api_key: ${{ inputs.new_relic_api_key }}
        TF_VAR_new_relic_account_id: ${{ inputs.new_relic_account_id }}
      run: |
        terragrunt plan -no-color  --terragrunt-non-interactive -out ${{ github.workspace }}/tfplan

    - name: Find Comment
      if: github.event.pull_request.draft == false &&
          github.event_name == 'pull_request'
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-regex: "^### Forest: ${{ inputs.environment }} Infrastructure Plan"


    - name: Create or Update Comment
      if: github.event.pull_request.draft == true &&
          github.event_name == 'pull_request' &&
          !contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.')
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### Forest: ${{ inputs.environment }} Infrastructure Plan: ${{ steps.plan.outcome }}

          <details><summary>Show Plan</summary>

          ```
          ${{ steps.plan.outputs.stdout }}
          ```

          </details>
        edit-mode: replace

    - name: Delete Comment
      uses: detomarco/delete-comments@v1.0.4
      if: github.event.pull_request.draft == true &&
          github.event_name == 'pull_request' &&
          contains(steps.plan.outputs.stdout, 'No changes. Your infrastructure matches the configuration.')
      with:
          comment-id: ${{ steps.fc.outputs.comment-id }}

    - name: Terragrunt Plan Status
      shell: bash
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terragrunt Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if grep -q 'No changes.' tfplan; then
          echo "No changes detected."
        else
          echo "Changes detected. Redeploying everything..."
          terragrunt destroy -auto-approve --terragrunt-non-interactive
          terragrunt apply -auto-approve --terragrunt-non-interactive
        fi
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_VAR_do_token: ${{ inputs.do_token }}
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        TF_VAR_slack_token: ${{ inputs.slack_token }}
        TF_VAR_R2_ACCESS_KEY: ${{ inputs.r2_access_key }}
        TF_VAR_R2_SECRET_KEY: ${{ inputs.r2_secret_key }}
        TF_VAR_NEW_RELIC_API_KEY: ${{ inputs.NEW_RELIC_API_KEY }}
        TF_VAR_NR_LICENSE_KEY: ${{ inputs.NR_LICENSE_KEY }}
        TF_VAR_NEW_RELIC_ACCOUNT_ID: ${{ inputs.new_relic_account_id }}

    - name: Terragrunt Force Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        TF_VAR_do_token: ${{ inputs.do_token }}
        TF_VAR_AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        TF_VAR_R2_ACCESS_KEY: ${{ inputs.r2_access_key }}
        TF_VAR_R2_SECRET_KEY: ${{ inputs.r2_secret_key }}
        TF_VAR_slack_token: ${{ inputs.slack_token }}
        TF_VAR_NEW_RELIC_API_KEY: ${{ inputs.new_relic_api_key }}
        TF_VAR_NR_LICENSE_KEY: ${{ inputs.nr_license_key }}
        TF_VAR_NEW_RELIC_ACCOUNT_ID: ${{ inputs.new_relic_account_id }}
      run: |
        terragrunt destroy -auto-approve --terragrunt-non-interactive
        terragrunt apply -auto-approve --terragrunt-non-interactive
